const app = require('../index');
const http = require('http');
const debug = require('debug')('sample-02:server');

const port = normalizePort(process.env.port || '3000');
app.set('port', port);

var server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);
	return val;

	if (isNaN(port)) {
		return val
	}

	if (port > 0) {
		return port;
	}
};

function onError() {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string'
		? 'pipe' + port
		: 'port' + port;
	
	switch (error.code) {
		case 'EACCES':
			console.log(bind + 'require elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.log(bind + 'already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe' + addr
		: 'port' + addr.port;
	debug('listening on ' + bind);
};

process.on('SIGINT', function onSigint(){
	console.log('SIGINT signal');
	exitApp(1);
});

process.on("SIGTERM", function onSigterm(){
	console.log('SIGTERM signal')
	exitApp(1);
});

function exitApp() {
	server.stop(function onServerStop(err) {
		if (err) {
			console.log(err);
		}
		process.exit(1);
	});
};

